START PROJECT
    1. Create "START HERE" folder with "backend" folder.
    2. Run "django-admin startproject config ."


START APP
    1. Create "apps" folder inside of "backend" folder with "mkdir apps"
    2. cd into apps with "cd apps" and create first app with "django-admin startapp [app name]"
    3. Register app with project in config/settings.py under INSTALLED_APPS


REGISTER URL ROUTING
    1. Inside of the [app name] folder create "urls.py" file.
    2. copy import path and urlpatterns from config/urls.py. Add "path('', views.home, name="home")" inside of urlpatterns
    3. In config/urls.py add "include" to import path and add [app name] path to urlpatterns with "path('', include('[app name].urls')),"


VIEWS (HttpResponse TEST)
    1. Navigate to [app name]/views.py file
    2. Import views into [app name]/urls.py with "from . import views"
    3. Inside views.py file import HttpResponse with "from django.http import HttpResponse"
    4. Create first view function that takes in the "request" parameter and returns HttpResponse with 

       " def home(request): 
             return HttpResponse('Hello World') "

    5. If "django.core.exceptions.ImproperlyConfigured: Cannot import" error occurs navigate to apps.py and add "apps." to name attribute in class TestappConfig


TEMPLATE VIEWS
    1. In [app name]/urls.py create a new path with "path('test_path/', views.test_path, name="test_path")"
    2. In [app name]/views.py create a new views function with

       " def test_path(request): 
             return render('test_content.html') "

    3. In backend folder create "templates" folder. In backend folder create "static" folder.
    4. In "templates" folder create "test_path.html" file
    5. In settings.py add " BASE_DIR / 'templates' " to 'DIRS' under TEMPLATES.
    6. In [app name]/views.py add context to function with "context = {}". Pass "context=context" as second argument to render function.


MAKE MIGRATIONS TO ACCESS ADMIN PANEL
    1. python3 manage.py makemigrations
    2. python3 manage.py migrate


CREATE SUPERUSER
    1. python3 manage.py createsuperuser
    2. Add username
    3. Add email
    4. Add password


CREATE MODELS
    1. In [app name]/models.py create model class with 

       " class [model name](models.Model):
           class Meta(object):
               db_table = 'testmodel'
        
           name = models.Charfield(max_length=200
           )
           image = CloudinaryField(
               'image', default=""
           ) "

    2. Add 

       " def __str__(self): 
             return self.name " 

       to bottom of [app name]/models.py to view name of item in datebase table
    3. Import models into [app name]/admin.py with "from .models import [model class]"
    4. Register model in [app name]/admin.py with "admin.site.register([model class])"
    5. Stage migrations with "python3 manage.py makemigrations" & apply migrations with "python3 manage.py migrate"
    6. Add item to database model in admin panel to test


INSTALL CLOUDINARY AND ADD TO TestModel class
    1. Install with "pip3 install cloudinary"
    2. Add following to config/setting.py: 
    " import cloudinary ", 
    " import cloudinary.uploader ", 
    " import cloudinary.api "
    3. In config/settings.py add cloudinary to INSTALLED_APPS with " 'cloudinary', "
    4. At the bottom of config/settings.py add the cloudinary config with 
       " cloudinary.config(
            cloud_name="",
            api_key="",
            api_secret="",
            secure=True
         ) "
    5. Create cloudinary account and enter information from dashboard into appropriate variable in cloudinary.config()
    6. Add image in admin panel to test


RENDER DATA IN TEMPLATES (test_path.html)
    1. In [app name]/views.py import models with "from .models import [model name]"
    2. In view function previously created add the query "[variable] = [imported model].objects.all()"
    3. Inside context object create a dictionary with same key and value name as [variable]
       ex. " context = {
                 '[variable]': [variable]
             } "
    4. In test_path.html create <ul></ul> and <li></li>
    5. Create for loop using ginger templating with {% for [variable] in [dictionary value] %} at top in-between <ul> and <li> tags & {% end for  %} at bottom in-between <ul> and <li> tags
    6. Render data with {{ [dictionary value].name }} in-between <li></li>


SET UP {% block content %} IN test_path.html
    1. In test_path.html replace <ul> and <li> with 

       " {% block content %} 
         {{ content }} 
         {% endblock %} "

         in the <body></body>.
    2. In templates/testapp folder create "test_content.html"
    3. At the top of test_content.html add "{% extends "test_path.html" %}"
    4. On the next line add "{% block content %} {% endblock %}"
    5. In between curly brace statements add 

       " <h1 class="title">START HERE</h1>
         <p class="intro">So you decided to start a project... That's great!<br>
             This template was setup with a "testapp". <br>
             For each new app, simply go through the "testapp" files and follow instructions found in steps.txt.</p>
         <div class="center">
             {% for test in tests %}
             <div class="card">
                 <p class="name">{{ test.name}}</p>
                 <img class="img" src={{test.image.url}}>
             </div>
             {% endfor %}
         </div> " 

         to build page.


LINK CSS AND HTML
    1. At the top of testapp/settings.py add "import os"
    2. In testapp/settings.py under "static" section add "STATICFILES_DIRS = [     os.path.join(BASE_DIR, 'static'), ]" "STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")" and "STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'"
    3. In test_path.html add "{% load static %}" and "<link href="{% static 'css/test_path.css' %}" rel="stylesheet" type="text/css">"
    4. In "static/css" folder add test_path.css


ADD BASIC STYLING

    1. In test_path.css add 
    
       "
        /************
        COMMON
        ************/

        * {
            box-sizing: border-box;
        }

        ::-webkit-scrollbar {
            display: none;
        }

        body {
            height: 100vh;
            padding: 0;
            margin: auto;
            background-color: #000000;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .title {
            color: #FFFFFF;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .intro {
            color: #FFFFFF;
            text-align: center;
            margin: 16px 5px;
        }

        .center {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
            width: 75%;
            overflow: scroll;
        }

        .card {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            margin: 30px;
        }

        .name {
            color: #FFFFFF;
            text-align: center;
        }

        img {
            border-radius: 15px;
            border: 1px solid #000000;
            width: 200px;
            height: 200px;
            box-shadow: 0px 0px 12px 3px #FFFFFF;
        } "

    2. Intro messages and data from database should be rendered nice and center.


BUILD WHAT YOU WANT
    1. Build whatever you fucking want, homie!!


CREATE GITHUB REPO
    1.
    2.
    3.
    4.
    5.
    6.
    7.
    8.
    9.
    10.